// See https://aka.ms/new-console-template for more information

if (args.Length != 1)
{
    Console.WriteLine("Usage: generate_ast <output directory>\n");
    throw new ArgumentException("Invalid number of arguments provided", nameof(args));
}

var outputDirectory = args[0];
DefineAst(outputDirectory, "Expr", new List<string>
{
    "Assign     : Token Name, Expr Value",
    "Binary     : Expr Left, Token Operator, Expr Right",
    "Grouping   : Expr Expression",
    "Literal    : object? Value",
    "Logical    : Expr Left, Token Operator, Expr Right",
    "Unary      : Token Operator, Expr Right",
    "Variable   : Token Name",
});

DefineAst(outputDirectory, "Stmt", new List<string>
{
    "Block                  : List<Stmt?> Statements",
    "ExpressionStatement    : Expr Expression",
    "If                     : Expr Condition, Stmt ThenBranch, Stmt? ElseBranch",
    "Print                  : Expr Expression",
    "Var                    : Token Name, Expr? Initializer",
});

static void DefineAst(string outputDirectory, string baseName, List<string> types)
{
    const string indent = "    ";
    var path = Path.Combine(outputDirectory, $"{baseName}.cs");
    Console.WriteLine($"> Generating {Path.GetFullPath(path)}");
    using var writer = File.CreateText(path);

    writer.WriteLine($"// File generated by generate_ast on {DateTime.Now:dd-MMM-yyyy HH:mm:ss zzz}");
    writer.WriteLine("#pragma warning disable 1591");
    writer.WriteLine();
    writer.WriteLine("namespace cslox;");
    writer.WriteLine();
    writer.WriteLine($"public abstract record {baseName}");
    writer.WriteLine("{");

    DefineVisitor(writer, baseName, types);

    writer.WriteLine($"{indent}public abstract R Accept<R>(IVisitor<R> visitor);");
    writer.WriteLine();

    foreach (var type in types)
    {
        var typeComponents = type.Split(':', StringSplitOptions.TrimEntries);
        if (typeComponents.Length != 2)
        {
            throw new ArgumentException($"Failed to split '{type}' into two components.");
        }

        var className = typeComponents[0];
        var fields = typeComponents[1];
        DefineType(writer, baseName, className, fields);
        writer.WriteLine();
    }

    writer.WriteLine("}");
    writer.WriteLine();
    writer.WriteLine("#pragma warning restore 1591");
}

static void DefineType(StreamWriter writer, string baseName, string className, string fieldList)
{
    const string indent = "    ";
    writer.WriteLine($"{indent}public record {className}({fieldList}) : {baseName}");
    writer.WriteLine($"{indent}{{");
    writer.WriteLine($"{indent}{indent}public override R Accept<R>(IVisitor<R> visitor)");
    writer.WriteLine($"{indent}{indent}{{");
    writer.WriteLine($"{indent}{indent}{indent}return visitor.Visit{className}{baseName}(this);");
    writer.WriteLine($"{indent}{indent}}}");
    writer.WriteLine($"{indent}}}");
}

static void DefineVisitor(StreamWriter writer, string baseName, List<string> types)
{
    const string indent = "    ";
    writer.WriteLine($"{indent}public interface IVisitor<R>");
    writer.WriteLine($"{indent}{{");
    foreach (var type in types)
    {
        var typeName = type.Split(':', StringSplitOptions.TrimEntries)[0];
        writer.WriteLine($"{indent}{indent}R Visit{typeName}{baseName}({typeName} {baseName.ToLower()});");
    }
    writer.WriteLine($"{indent}}}");
    writer.WriteLine();
}
